algo exo array_2D

variables
	notes(i,j), moyenne(i): tableau d'entiers
	moyenneEleve, moyenneClasse, i, j, notesSizeI, notesSizeJ, sommeEleve, sommeClasse, meilleurEleve : entiers
	
début

	saisir ("Entrez le nombre de notes par étudiants : ", noteSizeJ)
	saisir ("Entrez le nombre d'étudiants : ", noteSizeI)
	redim (moyenne, noteSizeI)
	
	moyenneEleve := 0
	moyenneClasse := 0
	sommeEleve := 0
	sommeClasse := 0
	
	for (i : = 0, i = noteSizeI, i++)
		moyenneEleve = 0
		sommeEleve = 0
		for (j := 0, j = noteSizeJ, j++)
			sommeEleve = sommeEleve + notes(i,j)
		fin_pour
		moyenneEleve := sommeEleve / notesSizeJ
		moyenne(i) := moyenneEleve
		
		if (moyenneEleve > moyenne(i)) {
			meilleurEleve = i
			}
	fin_pour
	
	for (i := 0, i = noteSizeI, i++)
		sommeClasse = sommeClasse + moyenne(i)
	fin_pour
	
	moyenneClasse = sommeClasse / noteSizeI
	
	if (moyenneEleve > moyenneClasse) {
		afficher ("L'elève dont la moyenne est superieur à la moyenne de la classe est : ", meilleurEleve)
	

fin

VOIR CORRECTION CHAKIB, PAS LOIN DE LA VERITE

---------------------------------------------------------

algo exo 7.1

variables
	array(i) : array of integer
	arraySize, i, counter : integer

begin

	prompt ("Entrez le nombre de valeur souhaitées : ", arraySize)
	redim (array, arraySize)
	counter := 0
	
	for (i := 0, i < arraySize, i++) {
		prompt ("Entrez une valeur : ", array(i))
		if (i != 0 and array(i) = array(i+1) - 1){
			counter = counter + 0
		} else if (i !=0 and array(i) != array(i+1) - 1){
			counter = counter + 1
		}
	}
	
	if (counter = 0){
		display ("C'est une suite consécutive")
	} else {
		display ("Ce n'est pas une suite consécutive")
	}
	
end

---------------------------------------------------------

algo exo 7.2

//  TRI PAR SELECTION
variables 
	tab() : array of integer;
	size : integer
		
function triParSelec (tab() : array of integers) : array of integer{
	variables
		i, j, min, indexMax, tEmpty : integer;
	
		for(i := 0, i < (tab.length - 1), i++){
		min := tab(i);
		indexMax := i;
		for(j := i + 1, j < tab.length, j++){
			if(tab(j) > min){
				indexMax := j;
			}
		}
		tEmpty := tab(i);
		tab(i) := tab(indexMax);
		tab(indexMax) := tEmpty;
	}
	return tab()
}	

begin

	prompt(size);
	redim(tab, size);
	
	display (triParSelec(tab))
	
end

//TRI PAR BULLE
variables
	tab() : array of integer;

function triParBulle (tab() : array of integers) : array of integers{
	variables
		yaPermut : boolean
		i, tEmpty : integer
		
		yaPermut := true
	
		while (yaPermut)
			yaPermut := false
			for (i := 0, i < tab.length, i++){
				if (tab(i) < tab(i+1){
					tEmpty := tab(i);
					tab(i) := tab(i+1);
					tab(i+1) := tEmpty;
					yaPermut := true
				}
			}
		end_while
	return tab()
}
	
begin 

	prompt (size);
	redim (tab, size);
	
	display (triParBulle(tab))

end

---------------------------------------------------------

algo exo 7.3

variables 
	tab() : array of integer;
		
function reverseArray (tab() : array of integers) : array of integer{
	variables
		j, tEmpty : integer
		
		j := t.length - 1
		for (i := 0, i > (t.length/2), i++){
			tEmpty := tab(i);
			tab(i) := tab(j)
			tab(j) := tEmpty 
			
		}
	return tab()
}

begin

	display (reverseArray(tab))
	
end

---------------------------------------------------------

algo exo 7.4

variables
	tab(10) : array of string;
	
procedure remove (var t: array of string, deletedIndex : integer){
	variables
		i : integer;
		
	for (i := deletedIndex, i < t.length, i++){
		t(i) := t(i+1);
	}
	redim(t, -1)
}

begin

	remove(tab, prompt("Saisir l'indice de la valeur que vous souhaitez supprimer : ", deletedIndex))
	
end

---------------------------------------------------------

algo exo 7.5

variables
	dico() : array of string;
	keyWord : string
	indexWord : integer
	
begin

	prompt("Veuillez saisir le mot que vous recherchez : ", keyWord)
	
	for(i := 0, i < dico.length, i++){
		if (dico(i) = keyWord){
			indexWord := i
		}
	}
	
	display ("Le mot dans le dictionnaire" : ,dico(indexWord) ", est à la position " ,indexWord) 

end

CORRECTION

variables
	dico() : array of strings;
	keyWord : string;

function isIn(t : array of strings, word : string) : boolean{
	variables
		found : boolean
		startIndex, endIndex, : integer
	
	startIndex := 0;
	endIndex := t.length - 1;
	found := false;
	
	while(!found and startIndex != endIndex){
		middleIndex := (startIndex + endIndex) / 2;
		if (word > t(middleIndex){
			startIndex := middleIndex + 1;
		} else if (word < t(middleIndex){
			endIndex := middleIndex - 1;
		} else {
			found := true;
		}
	}
		
	return found;
}
	
begin

	prompt("Type the word : ", keyWord)
	if (isIn(dico(), keyWord){
		display ("Found !")
	} else {
		display ("404 not found !")
	}

end